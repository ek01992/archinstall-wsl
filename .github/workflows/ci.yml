name: CI

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "**" ]

permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.6'
          cache: true

      - name: Download dependencies
        run: go mod download

      - name: Lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          args: --timeout=5m ./...

      - name: Vet
        run: go vet ./...

      - name: Install staticcheck
        run: go install honnef.co/go/tools/cmd/staticcheck@latest

      - name: Staticcheck
        run: $(go env GOPATH)/bin/staticcheck ./...

      - name: Test (race, coverage)
        run: go test -race -coverprofile=coverage.txt -covermode=atomic ./...

      - name: Enforce minimum coverage (overall >= 60%)
        run: |
          total=$(go tool cover -func=coverage.txt | awk '/^total:/ {print substr($3, 1, length($3)-1)}')
          awk -v total="$total" 'BEGIN { if (total + 0 < 60.0) { print "Coverage "+total"% is below threshold (60%)"; exit 1 } else { print "Coverage "+total"% meets threshold" } }'

      - name: Forbid new global seams (grep)
        run: |
          set -e
          # Scan only Go source files to avoid matching examples in docs
          if git grep -nE 'var\s+\w+\s*=\s*func\(' -- '*.go' ':!**/*_test.go' ':!internal/runtime/*' --quiet; then
            echo "Found potential global function seams. Please use Services and DI instead." >&2
            git grep -nE 'var\s+\w+\s*=\s*func\(' -- '*.go' ':!**/*_test.go' ':!internal/runtime/*'
            exit 1
          fi

  concurrent-race:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        pkg: [ "internal/user", "internal/ssh", "internal/firewall", "internal/git" ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.6'
          cache: true

      - name: Download dependencies
        run: go mod download

      - name: Race run (Service_Concurrent tests)
        run: |
          go test -race ./${{ matrix.pkg }} -run Service_Concurrent -count=1 -v
